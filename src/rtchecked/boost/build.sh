#! /bin/bash
set -eux
. ${VOLUMEDRIVER_BUILD_CONFIGURATION?"You need to set the path to the build configuration file"}

BOOST_VERSION_PRETTY=1.62.0
BOOST_VERSION=boost_$(echo -n ${BOOST_VERSION_PRETTY} | sed 's/\./_/g')
BOOST_DIR=$BOOST_VERSION
BOOST_PACKAGE=${BOOST_VERSION}.tar.bz2
BOOST_URL=http://downloads.sourceforge.net/project/boost/boost/${BOOST_VERSION_PRETTY}/${BOOST_PACKAGE}
BOOST_BUILD_DIR=boost_build

. ../definitions.sh
. ../../helper-functions.sh

get_package_or_die $BOOST_PACKAGE $BOOST_URL

echo ">+>+> Cleaning up from previous build"
rm -rf $BOOST_DIR $BOOST_BUILD_DIR
echo "<+<+< Done cleaning up from previous build"

echo ">+>+> Unpacking $BOOST_PACKAGE"
 tar -xjf $SOURCES_DIR/$BOOST_PACKAGE
echo "<+<+< Done unpacking $BOOST_PACKAGE"

echo ">+>+> Patching $BOOST_VERSION"

echo "<+<+< Done patching $BOOST_VERSION"

# Add the correct flags for boost compilation .. another build system..lovely
BOOST_COMPILER_FLAGS=""
for i in ${CXX_COMPILER_FLAGS}
do
BOOST_COMPILER_FLAGS="$BOOST_COMPILER_FLAGS <cxxflags>$i"
done

# Specifying which boost to use can be done here by checking:
# http://www.boost.org/doc/libs/1_53_0/libs/python/doc/building.html
# and specifying the correct using python line beneath. For now we just
# support the system python and trust that that is the one the boost
# build system will find.

cat > project-config.jam <<EOF
# Boost.Build Configuration
# Automatically generated by bootstrap.sh

import option ;
import feature ;

# Compiler configuration. This definition will be used unless
# you already have defined some toolsets in your user-config.jam
# file.
# if ! gcc in [ feature.values <toolset> ]
{
    using gcc : vd : /usr/bin/g++ : $BOOST_COMPILER_FLAGS ;
}

project : default-build <toolset>gcc ;

# Python configuration
using python : \${PYTHON_VERSION} : /usr ;

# List of --with-<library> and --without-<library>
# options. If left empty, all libraries will be built.
# Options specified on the command line completely
# override this variable.
libraries =  --without-math --without-wave --without-graph --without-graph_parallel --without-mpi ;

# These settings are equivivalent to corresponding command-line
# options.
option.set prefix : $PREFIX ;
option.set exec-prefix : $PREFIX ;
option.set libdir : $PREFIX/lib ;
option.set includedir : $PREFIX/include ;

# Stop on first error
option.set keep-going : false ;
EOF

echo ">+>+> Configuring $BOOST_VERSION"
pushd $BOOST_DIR
./bootstrap.sh --without-icu --without-libraries=math,wave,graph,graph_parallel,mpi --prefix=$PREFIX
echo "<+<+< Done configuring $BOOST_VERSION"

mv ../project-config.jam .

echo ">+>+> Building $BOOST_VERSION"
./b2 -a -d2 -q -j ${BUILD_NUM_PROCESSES-2} --build-dir=$BOOST_BUILD_DIR --disable-icu toolset=gcc-vd link=shared variant=debug threading=multi
echo "<+<+< Done building $BOOST_VERSION"

echo ">+>+> Removing previous installation (if any)"
rm -rf ${PREFIX}/include/boost
rm -rf ${PREFIX}/lib/libboost*
echo "<+<+< Done removing previous installation"

echo ">+>+> Installing $BOOST_VERSION"
./b2 -a -d2 -q -j ${BUILD_NUM_PROCESSES-2} --build-dir=$BOOST_BUILD_DIR --disable-icu toolset=gcc-vd link=shared variant=debug threading=multi install
echo "<+<+< Done installing $BOOST_VERSION"

BUILD_SIZE=`du -sh`
echo "Build used $BUILD_SIZE disk space"

echo ">+>+>+ Cleaning up"
popd
rm -rf $BOOST_DIR $BOOST_BUILD_DIR project-config.jam
echo "<+<+< Done cleaning up"

#   bjam [ options... ] targets...

#   * -a; Build all targets, even if they are current.
#   * -fx; Read 'x' as the Jamfile for building instead of searching for the
#     Boost.Build system.
#   * -jx; Run up to 'x' commands concurrently.
#   * -n; Do not execute build commands. Instead print out the commands as they
#     would be executed if building.
#   * -ox; Output the used build commands to file 'x'.
#   * -q; Quit as soon as a build failure is encountered. Without this option
#     Boost.Jam will continue building as many targets as it can. print.list-item
#     -sx=y; Sets a Jam variable 'x' to the value 'y', overriding any value that
#     variable would have from the environment.
#   * -tx; Rebuild the target 'x', even if it is up-to-date.
#   * -v; Display the version of bjam.
#   * --x; Any option not explicitly handled by Boost.Jam remains available to
#     build scripts using the 'ARGV' variable.
#   * -dn; Enables output of diagnostic messages. The debug level 'n' and all
#     below it are enabled by this option.
#   * -d+n; Enables output of diagnostic messages. Only the output for debug
#     level 'n' is enabled.

# Debug Levels:

#   Each debug level shows a different set of information. Usually with higher
#   levels producing more verbose information. The following levels are supported:

#   * 0; Turn off all diagnostic output. Only errors are reported.
#   * 1; Show the actions taken for building targets, as they are executed.
#   * 2; Show quiet actions and display all action text, as they are executed.
#   * 3; Show dependency analysis, and target/source timestamps/paths.
#   * 4; Show arguments of shell invocations.
#   * 5; Show rule invocations and variable expansions.
#   * 6; Show directory/header file/archive scans, and attempts at binding to
#     targets.
#   * 7; Show variable settings.
#   * 8; Show variable fetches, variable expansions, and evaluation of 'if'
#     expressions.
#   * 9; Show variable manipulation, scanner tokens, and memory usage.
#   * 10; Show execution times for rules.
#   * 11; Show parsing progress of Jamfiles.
#   * 12; Show graph for target dependencies.
#   * 13; Show changes in target status (fate).


# Local Variables: **
# compile-command: "time ./build.sh" **
# End: **
