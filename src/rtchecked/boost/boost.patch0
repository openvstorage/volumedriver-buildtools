diff -rupN boost_1_49_0.old/boost/property_tree/detail/json_parser_read.hpp boost_1_49_0/boost/property_tree/detail/json_parser_read.hpp
--- boost_1_49_0.old/boost/property_tree/detail/json_parser_read.hpp	2011-05-16 20:33:39.000000000 +0200
+++ boost_1_49_0/boost/property_tree/detail/json_parser_read.hpp	2013-04-14 12:27:01.000000000 +0200
@@ -1,8 +1,8 @@
 // ----------------------------------------------------------------------------
 // Copyright (C) 2002-2006 Marcin Kalicinski
 //
-// Distributed under the Boost Software License, Version 1.0. 
-// (See accompanying file LICENSE_1_0.txt or copy at 
+// Distributed under the Boost Software License, Version 1.0.
+// (See accompanying file LICENSE_1_0.txt or copy at
 // http://www.boost.org/LICENSE_1_0.txt)
 //
 // For more information, see www.boost.org
@@ -28,7 +28,7 @@ namespace boost { namespace property_tre
 
     ///////////////////////////////////////////////////////////////////////
     // Json parser context
-        
+
     template<class Ptree>
     struct context
     {
@@ -36,7 +36,7 @@ namespace boost { namespace property_tre
         typedef typename Ptree::key_type::value_type Ch;
         typedef std::basic_string<Ch> Str;
         typedef typename std::vector<Ch>::iterator It;
-        
+
         Str string;
         Str name;
         Ptree root;
@@ -59,7 +59,7 @@ namespace boost { namespace property_tre
                 }
             }
         };
-        
+
         struct a_object_e
         {
             context &c;
@@ -102,7 +102,7 @@ namespace boost { namespace property_tre
             void operator()(It b, It e) const
             {
                 BOOST_ASSERT(c.stack.size() >= 1);
-                c.stack.back()->push_back(std::make_pair(c.name, Str(b, e)));
+                c.stack.back()->push_back(std::make_pair(c.name, Ptree(Str(b, e))));
                 c.name.clear();
                 c.string.clear();
             }
@@ -159,16 +159,16 @@ namespace boost { namespace property_tre
     struct json_grammar :
         public boost::spirit::classic::grammar<json_grammar<Ptree> >
     {
-        
+
         typedef context<Ptree> Context;
         typedef typename Ptree::key_type::value_type Ch;
 
         mutable Context c;
-        
+
         template<class Scanner>
         struct definition
         {
-            
+
             boost::spirit::classic::rule<Scanner>
                 root, object, member, array, item, value, string, number;
             boost::spirit::classic::rule<
@@ -194,47 +194,47 @@ namespace boost { namespace property_tre
                 assertion<std::string> expect_escape("invalid escape sequence");
 
                 // JSON grammar rules
-                root 
-                    =   expect_root(object | array) 
+                root
+                    =   expect_root(object | array)
                         >> expect_eoi(end_p)
                         ;
-                
-                object 
+
+                object
                     =   ch_p('{')[typename Context::a_object_s(self.c)]
-                        >> (ch_p('}')[typename Context::a_object_e(self.c)] 
+                        >> (ch_p('}')[typename Context::a_object_e(self.c)]
                            | (list_p(member, ch_p(','))
                               >> expect_objclose(ch_p('}')[typename Context::a_object_e(self.c)])
                              )
                            )
                         ;
-                
-                member 
-                    =   expect_name(string[typename Context::a_name(self.c)]) 
-                        >> expect_colon(ch_p(':')) 
+
+                member
+                    =   expect_name(string[typename Context::a_name(self.c)])
+                        >> expect_colon(ch_p(':'))
                         >> expect_value(value)
                         ;
-                
-                array 
+
+                array
                     =   ch_p('[')[typename Context::a_object_s(self.c)]
-                        >> (ch_p(']')[typename Context::a_object_e(self.c)] 
+                        >> (ch_p(']')[typename Context::a_object_e(self.c)]
                             | (list_p(item, ch_p(','))
                                >> expect_arrclose(ch_p(']')[typename Context::a_object_e(self.c)])
                               )
                            )
                     ;
 
-                item 
+                item
                     =   expect_value(value)
                         ;
 
-                value 
-                    =   string[typename Context::a_string_val(self.c)] 
+                value
+                    =   string[typename Context::a_string_val(self.c)]
                         | (number | str_p("true") | "false" | "null")[typename Context::a_literal_val(self.c)]
-                        | object 
+                        | object
                         | array
                         ;
-                
-                number 
+
+                number
                     =   !ch_p("-") >>
                         (ch_p("0") | (range_p(Ch('1'), Ch('9')) >> *digit_p)) >>
                         !(ch_p(".") >> +digit_p) >>
@@ -304,14 +304,14 @@ namespace boost { namespace property_tre
                           std::istreambuf_iterator<Ch>());
         if (!stream.good())
             BOOST_PROPERTY_TREE_THROW(json_parser_error("read error", filename, 0));
-        
+
         // Prepare grammar
         json_grammar<Ptree> g;
 
         // Parse
         try
         {
-            parse_info<It> pi = parse(v.begin(), v.end(), g, 
+            parse_info<It> pi = parse(v.begin(), v.end(), g,
                                       space_p | comment_p("//") | comment_p("/*", "*/"));
             if (!pi.hit || !pi.full)
                 BOOST_PROPERTY_TREE_THROW((parser_error<std::string, It>(v.begin(), "syntax error")));
