From b887fa85fb7c331754d73bc83fba80c894343418 Mon Sep 17 00:00:00 2001
From: Arne Redlich <arne.redlich@googlemail.com>
Date: Wed, 25 Jun 2014 22:28:39 +0200
Subject: [PATCH] Introduce arakoon_user_function

This exposeses Arakoon's user function interface.

Signed-off-by: Arne Redlich <arne.redlich@googlemail.com>
---
 src/arakoon.c | 61 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/arakoon.h | 13 +++++++++++++
 2 files changed, 74 insertions(+)

diff --git a/src/arakoon.c b/src/arakoon.c
index 8176a8e..82dbb77 100644
--- a/src/arakoon.c
+++ b/src/arakoon.c
@@ -530,6 +530,67 @@ arakoon_rc arakoon_get(ArakoonCluster *cluster,
         return rc;
 }
 
+arakoon_rc arakoon_user_function(ArakoonCluster *cluster,
+    const ArakoonClientCallOptions * const options,
+    const char * const user_function,
+    const size_t arg_size,
+    const void * const arg,
+    size_t *result_size,
+    void **result) {
+        size_t len = 0;
+        char *command = NULL, *c = NULL;
+        arakoon_rc rc = 0;
+        ArakoonClusterNode *master = NULL;
+        int timeout = ARAKOON_CLIENT_CALL_OPTIONS_DEFAULT_TIMEOUT;
+        size_t fun_size = 0;
+
+        FUNCTION_ENTER(arakoon_user_function);
+
+        ASSERT_NON_NULL_RC(cluster);
+        ASSERT_NON_NULL_RC(user_function);
+        ASSERT_NON_NULL_RC(result_size);
+        ASSERT_NON_NULL_RC(result);
+
+        *result_size = 0;
+        *result = NULL;
+
+        _arakoon_cluster_reset_last_error(cluster);
+
+        READ_OPTIONS;
+        timeout = arakoon_client_call_options_get_timeout(options_);
+
+        ARAKOON_CLUSTER_GET_MASTER(cluster, master);
+
+        fun_size = strlen(user_function);
+
+        len = ARAKOON_PROTOCOL_COMMAND_LEN
+                + ARAKOON_PROTOCOL_STRING_LEN(fun_size)
+                + ARAKOON_PROTOCOL_STRING_OPTION_LEN(arg, arg_size);
+
+        command = arakoon_mem_new(len, char);
+        RETURN_ENOMEM_IF_NULL(command);
+
+        c = command;
+
+        ARAKOON_PROTOCOL_WRITE_COMMAND(c, 0x15, 0x00);
+        ARAKOON_PROTOCOL_WRITE_STRING(c, user_function, fun_size);
+        ARAKOON_PROTOCOL_WRITE_STRING_OPTION(c, arg, arg_size);
+
+        ASSERT_ALL_WRITTEN(command, c, len);
+
+        WRITE_BYTES(master, command, len, rc, &timeout);
+        arakoon_mem_free(command);
+        RETURN_IF_NOT_SUCCESS(rc);
+
+        ARAKOON_PROTOCOL_READ_RC(master, rc, &timeout);
+
+        HANDLE_ERROR(rc, master, cluster, &timeout);
+        RETURN_IF_NOT_SUCCESS(rc);
+
+        ARAKOON_PROTOCOL_READ_STRING_OPTION(master, *result, *result_size, rc, &timeout);
+        return rc;
+}
+
 arakoon_rc arakoon_set(ArakoonCluster *cluster,
     const ArakoonClientCallOptions * const options,
     const size_t key_size, const void * const key,
diff --git a/src/arakoon.h b/src/arakoon.h
index 852e09e..00e6215 100644
--- a/src/arakoon.h
+++ b/src/arakoon.h
@@ -1048,6 +1048,19 @@ arakoon_rc arakoon_get(ArakoonCluster *cluster,
     const size_t key_size, const void * const key,
     size_t *result_size, void **result)
     ARAKOON_GNUC_NONNULL4(1, 4, 5, 6) ARAKOON_GNUC_WARN_UNUSED_RESULT;
+/* Invoke a user function (plugin) on the server
+ *
+ * The resulting value will be stored in result and its length in result_size.
+ * 'result' needs to be released by the caller once it's not needed anymore.
+ */
+arakoon_rc arakoon_user_function(ArakoonCluster *cluster,
+    const ArakoonClientCallOptions * const options,
+    const char * const user_function,
+    const size_t arg_size,
+    const void * const arg,
+    size_t *result_size,
+    void **result)
+    ARAKOON_GNUC_NONNULL4(1, 3, 6, 7) ARAKOON_GNUC_WARN_UNUSED_RESULT;
 /* Send a 'multi_get' call to the server
  *
  * The result value list will be stored at 'result'. This ArakoonValueList
-- 
1.9.1

